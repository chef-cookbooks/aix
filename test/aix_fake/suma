#!/bin/ksh93
#KSH script to simulate "suma" command

typeset do_exec=0
typeset -A fields
fields['DisplayName']=
fields['Action']=Download
fields['RqType']=Latest
fields['RqName']=
fields['DLTarget']=/usr/sys/inst.images
fields['FilterDir']=/usr/sys/inst.images
fields['FilterML']=

typeset -A bff_list

#===============================================
# Usage
#===============================================
function usage
{
    typeset cmd=$(basename $1)
    print "++ Suma fake for tests ++
Usage:
Create, Edit, or Schedule a SUMA task.
        suma { { [-x][-w] } | -s CronSched } [ -a Field=Value ]... [ TaskID ]

List SUMA tasks.
        suma -l [ TaskID ]...

List or Edit the default SUMA task.
        suma -D [ -a Field=Value ]...

List or Edit the SUMA global configuration settings.
        suma -c [ -a Field=Value ]...

Unschedule a SUMA task.
        suma -u TaskID

Delete a SUMA task.
        suma -d TaskID
"
    return 0
}

#===============================================
# error_managment
#===============================================
function error_managment
{
    error_message=""
    display_name="${fields['DisplayName']}"
    
    if [ ! -z $(echo $display_name | grep "0500-004") ]
    then
        if [ "${fields['Action']}" == 'Download' ]
        then
            error_message="0500-004 no more space."
            error_message="### SUMA FAKE Download ERROR ###"
        fi
    fi

    if [ ! -z $(echo $display_name | grep "0500-013") ]
    then
        error_message="0500-013 Failed to retrieve list from fix server."
    fi

    if [ ! -z $(echo $display_name | grep "0500-059") ]
    then
        error_message="0500-059 Entitlement is required to download. The system's serial number is not entitled. Please go to the Fix Central website to download fixes."
    fi

    if [ ! -z $(echo $display_name | grep "0500-035") ]
    then
        error_message="0500-035 No fixes match your query."
    fi

    if [ ! -z $(echo $display_name | grep "ERROR metadata 1") ]
    then
        error_message="### SUMA FAKE ERROR Metadata 1 ###"
    fi

    if [ ! -z $(echo $display_name | grep "ERROR metadata 2") ]
    then
        error_message="### SUMA FAKE ERROR Metadata 2 ###"
    fi

    if [ ! -z $(echo $display_name | grep "Preview ERROR") ]
    then
        error_message="### SUMA FAKE Preview ERROR ###"
    fi

    if [ ! -z "$error_message" ]
    then
        echo "$error_message"  >&2
        exit 1
    fi
}

#===============================================
# generate_bff
#===============================================
function generate_bff
{
    if [ "${fields['RqType']}" == "SP" ]
    then
        nb=100
    else
        if [ "${fields['RqType']}" == "TL" ]
        then
            nb=200
        else
            nb=350
        fi
    fi
    if [ "${fields['RqType']}" != "Latest" ]
    then
        version_origin=$(echo "${fields['FilterML']}" | sed 's|-||g')
        [ $version_origin -le 999999 ] && version_origin=$version_origin'00' 
        version_target=$(echo "${fields['RqName']}" | sed 's|-||g')
        [ $version_target -le 999999 ] && version_target=$version_target'00'
        [ $version_origin -ge $version_target ] && nb=0
    fi    
    let last_value=855000
    num=1
    while [ $num -lt $nb ]
    do
        let step=$num%4
        if [ $step -eq 0 ]
        then
        offset=124
        else if [ $step -eq 0 ]
        then
        offset=73
        else if [ $step -eq 0 ]
        then
        offset=347
        else
        offset=276
        fi; fi; fi
        let last_value+=$offset
        bff_list[$num]=$last_value
        let num+=1
    done
}

#===============================================
# run_action
#===============================================
function run_action
{
    action_type=$1
    if [ ! -z $(echo "${fields['DisplayName']}" | grep "time-out") ]
    then
        sleep 10
    fi    
    if [ $action_type -eq 0 ]
    then
        echo "****************************************"
        echo "Performing preview download."
        echo "****************************************"
    else
        mkdir -p "${fields['DLTarget']}/installp/ppc/"
    fi
    error_managment
    generate_bff
    with_failure=$(echo "${fields['DisplayName']}" | grep "failure")
    nb_download=0
    nb_failure=0
    nb_skip=0
    for item in "${bff_list[@]}"
    do
        bff_file="${fields['DLTarget']}/installp/ppc/U$item.bff"
        if [ -f "$bff_file" ]
        then
            echo "Download SKIPPED: $bff_file" 
            let nb_skip+=1
        else
            if [ ! -z "$with_failure" -a "${item:3:2}" == "72" ]
            then
                echo "Download FAILED: $bff_file" 
                let nb_failure+=1
            else
                if [ $action_type -eq 1 ]
                then
                    touch $bff_file
                fi
                echo "Download SUCCEEDED: $bff_file" 
                let nb_download+=1
            fi
        fi
    done
    let size=$nb_download*1024*1024*1024
    echo "Total bytes of updates downloaded: $size"
    echo "Summary:"
    echo "        $nb_download downloaded"
    echo "        $nb_failure failed"
    echo "        $nb_skip skipped" 
}


#===============================================
# create_metadata
#===============================================
function create_metadata
{
    error_managment
    mkdir -p "${fields['DLTarget']}/installp/ppc"
    for sp_id in 0 1 2 3 4 5 6 7 8
    do
        sp_name="${fields['FilterML']}-0${sp_id}"
        html_file="${fields['DLTarget']}/installp/ppc/${sp_name}.install.tips.html"
        touch $html_file
        xml_file="${fields['DLTarget']}/installp/ppc/${sp_name}.xml"
        rm -rf $xml_file
        echo '<!DOCTYPE packages SYSTEM "package.dtd">' >> $xml_file 
        echo '<packages>' >> $xml_file
        echo '<FileModDate value="20081115 10:51"/>' >> $xml_file
        echo '<SP name="'${sp_name}'-1316">' >> $xml_file
        echo '    <Name>'${fields['FilterML']}' Service Pack '${sp_id}'</Name>' >> $xml_file
        echo '</SP>' >> $xml_file
        echo '</packages>' >> $xml_file     
    done
}

#=====================================
: Parse command line
#=====================================
while getopts "xws:a:l:Dcu:d:h" opt ; do
    case $opt in
    a) 
IFS='=' read key value <<END
    $OPTARG
END
       key=$(echo $key)
       if [ ! -z "$(echo ${!fields[@]} | grep $key)" ]
       then  
            fields[$key]="$value"
       fi
       ;;
    x) do_exec=1
       ;;
    h) usage $0
       exit 0
       ;;
   \?) echo "Unrecognized parameter -$OPTARG" >&2
       exit 1
       ;;
    :) echo "Option -$OPTARG requires an argument." >&2
       exit 1
       ;;
    esac
done

if [ $do_exec -ne 0 ] 
then
    echo "### SUMA FAKE ${fields['Action']} ###"
    if [ ! -d "${fields['DLTarget']}" ]
    then
        echo "${fields['DLTarget']} must be an existing absolute path."
        echo "OR"
        echo "${fields['DLTarget']} must be the name of a NIM lpp_source."
        echo "0500-049 Task is not valid." >&2
        exit 1
    fi
    if [ "${fields['Action']}" == 'Preview' ]
    then
        run_action 0
        exit 0
    fi
    if [ "${fields['Action']}" == 'Download' ]
    then
        run_action 1
        exit 0
    fi
    if [ "${fields['Action']}" == 'Metadata' ]
    then
        create_metadata
        exit 0
    fi
    echo "#### BAD ACTION (${fields['Action']}) ####"
    exit 1
fi

echo "#### NOT IMPLEMENTED ####"
exit 1
