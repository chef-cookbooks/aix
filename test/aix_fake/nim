#!/bin/ksh93
#KSH script to simulate "nim" command

typeset operation=''
typeset nimtype=''
typeset object_name=''
typeset -A fields
fields['server']=''
fields['location']='/tmp/img.source'
fields['source']=''
fields['packages']=''
fields['comments']=''
fields['lpp_source']=''
fields['script']=''

#===============================================
# Usage
#===============================================
function usage
{
    typeset cmd=$(basename $1)
    print "++ Nim fake for tests ++
usage:
        nim -o <operation> [-F] [-t <type>] [ -S <YYMMDDhhmm> ] 
        [-a <attr=value>]... <object name>

        valid operations:
                activate, allocate, alt_disk_install, alt_disk_mig,
                bos_inst, change, check, chwpar, create, cust, dbts,
                deactivate, deallocate, define, deploy, destroy,
                diag, dkls_init, dtls_init, eject, fix_query,
                linux_inst, load, lppchk, lppmgr, lslpp, lswpar,
                maint, maint_boot, reboot, remove, reset, restvg,
                select, showdump, showlog, showres, snap, swts,
                sync, sync_roots, syncwpar, takeover, unconfig,
                update, updateios

        valid types:
                machines: alternate_master, dataless, diskless, master,
                standalone, wpar
                networks: atm, ent, ent6, fddi, generic, hfi, tok
                resources: adapter_def, boot, bosinst_data, devexports,
                dump, exclude_files, fb_script, file_res,
                fix_bundle, home, image_data, installp_bundle,
                ios_mksysb, linux_source, log, lpp_source, mksysb,
                nim_script, ovf_vm, paging, resolv_conf, root,
                savevg, savewpar, script, secattrs, shared_home,
                shared_root, spot, tmp, vg_data, vopt_iso,
                wpar_spec
                management: bcmm, cec, hmc, ivm, nas_filer, vios

        ** Use lsnim -O <object name> or lsnim -POt <type> to list valid
           operations for a particular object or object type.

        ** Use lsnim -q <operation> <object name> or
           lsnim -q <operation> -t <type> to list required and optional
           resources and attributes for a particular NIM operation.
"
    return 0
}

#===============================================
# run_action
#===============================================
function run_action
{
    action_type=$1

    # NIM Define lpp_source
    if [ $action_type -eq 0 ]
    then
        # lpp_source test value of 7100-02-02-1316-lpp_source should return an error although it exists in Ohai
        if [ "${fields['location']}" == "/sumatest/suma/error4/7100-02-02-1316-lpp_source" ]
        then
            echo "### NIM FAKE Define ERROR ###"
            echo "0042-001 nim: processing error encountered on \"${fields['server']}\":" >&2
            echo "   0042-001 m_mk_lpp_source: processing error encountered on \"${fields['server']}\":" >&2
            echo "   0042-154 c_stat: the file or directory \"${fields['location']}\" does not exist" >&2
            echo "" >&2
            echo "" >&2
            exit 1
        else
            echo "### NIM FAKE Define ###"
            echo "Preparing to copy install images (this will take several minutes)..."
            echo ""
            echo "Now checking for missing install images..."
        fi
    fi

    # NIM Customisation operation
    if [ $action_type -eq 1 ]
    then
        # lpp_source test value of 7100-08-00-0000-lpp_source should return an error although it exists in Ohai
        if [ "${fields['lpp_source']}" == "7100-08-00-0000-lpp_source" ]
        then
            echo "### NIM FAKE ERROR when CUSTOM OPERATION on client $object_name with resource ${fields['lpp_source']} ###"
            echo "0042-001 nim: processing error encountered on \"master\":" >&2
            echo "" >&2
            exit 1
        elif [ ! -z "${fields['script']}" ]
        then
            echo "### NIM FAKE DONE CUSTOM OPERATION with script ${fields['script']} ###"
        else
            echo "### NIM FAKE DONE CUSTOM OPERATION on client $object_name with resource ${fields['lpp_source']} ###"
        fi
    fi

    # NIM Allocate operation
    if [ $action_type -eq 2 ]
    then
        echo "### NIM FAKE DONE ALLOCATE OPERATION ###"
    fi

    # NIM Deallocate operation
    if [ $action_type -eq 3 ]
    then
        echo "### NIM FAKE DONE DEALLOCATE OPERATION ###"
    fi

    # NIM Remove operation
    if [ $action_type -eq 4 ]
    then
        echo "### NIM FAKE DONE REMOVE OPERATION ###"
    fi
}

#=====================================
: Parse command line
#=====================================
while getopts "o:Ft:S:a:h" opt ; do
    case $opt in
    a) 
IFS='=' read key value <<END
    $OPTARG
END
       key=$(echo $key)
       if [ ! -z "$(echo ${!fields[@]} | grep $key)" ]
       then
            fields[$key]="$value"
       fi
       ;;
    o) operation=$OPTARG
       ;;
    t) nimtype=$OPTARG
       ;;
    h) usage $0
       exit 0
       ;;
   \?) echo "Unrecognized parameter -$OPTARG" >&2
       exit 1
       ;;
    :) echo "Option -$OPTARG requires an argument." >&2
       exit 1
       ;;
    esac
done
shift $((OPTIND-1))
object_name="$*"

if [ ! -z "$operation" ] 
then
    if [ "$operation" == "define" -a "$nimtype" == "lpp_source" ]
    then
        run_action 0
        exit 0
    fi
    if [ "$operation" == "cust" ]
    then
        run_action 1
        exit 0
    fi
    if [ "$operation" == "allocate" ]
    then
        run_action 2
        exit 0
    fi
    if [ "$operation" == "deallocate" ]
    then
        run_action 3
        exit 0
    fi
    if [ "$operation" == "remove" ]
    then
        run_action 4
        exit 0
    fi
    echo "#### BAD OPERATION ($operation) ####"
    exit 1
fi

echo "#### NOT IMPLEMENTED ####"
exit 1
